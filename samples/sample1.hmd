---
title: Hadooc Sample
sub-title: Demoes most of the functionalities
date: 2016/4/4
---

# API 1.x User management API

## API 1.1 Login

** URL

{api} POST    /users/login

** Post request parameters

{!} username    @string    The user name
{!} password    @string    The password.

** JSON response parameters

{!$} userid     @string    The userid, only if authentication succeeded. May be
- the email
- the display name
{?$} role       @role    One of the value below.

** User Roles

{-:root} the king
- can read everything
- can write everywhere
{-:nobody} a peasant
{-:other} be careful

** HTTP Response Status Codes

{http:200} Success
{http:403} The user is logged in, but does not have enough permission
{http:500} Unable to access the data:
- the database is off
- the FBI was listening to the communication
{http:503} The janitor has tripped on the server's plug, again.

**

It is OK to have some free markdown after an API section. You can use:
- all marked extensions
- even hadooc extensions

For example, this is an enumeration:
{-:verb} value
{=:bold} value

---- {todo} Some comment that won't appear in the HTML unless you explicitly asked for it.

## API 1.2 Logout

````json
{
  "name": "Chuck Noris",
  "power": 850
}
````

{code:json}
{
  "name": "Sangoku",
  "power": 350
}
{/code}

{code:flowchart}
st=>start: Start|past:>http://www.google.com[blank]
e=>end: End|future:>http://www.google.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes
or No?|approved:>http://www.google.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|future
st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e
{/code}

{code:sequence}
Andrew->China: Says Hello
Note right of China: China thinks\nabout it
China-->Andrew: How are you?
Andrew->>China: I am good thanks!
{/code}
